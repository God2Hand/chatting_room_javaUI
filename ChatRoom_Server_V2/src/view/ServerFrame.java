/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import dao.Information;
import dao.Server;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JOptionPane;
import util.JtpUtil;
import util.UiUtil;

/**
 * 这是服务器界面类
 *      带有参数Server（服务器操作），以实现服务器功能
 * @author Shinelon
 */
public class ServerFrame extends javax.swing.JFrame {
    private Server server;

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame(Server server) {
        this.server = server;
        UiUtil.beautiful();//适应平台界面
        initComponents();
        init();
    }
    
    private void init() {
        this.setTitle("服务器");//设置窗体标题
        UiUtil.setFrameImage(this, "socket.jpg");//设置图标
        this.setResizable(false);//设置界面大小不可调
        UiUtil.setFrameCenter(this);//设置界面居中
        addWindowListener(new WindowAdapter() {//设置窗体关闭
           @Override
           public void windowClosing(WindowEvent e) {
               jbt_exit.doClick();
           } 
        });
    }
    
    //同一台机器上开了两个服务器/端口被占用
    public void portError() {
        JOptionPane.showMessageDialog(this, "不能同时开启两个服务器");
        jbt_start.setEnabled(false);
        jbt_stop.setEnabled(false);
    }
    
    public void setDisUsers(String userNames) {
        if(userNames.equals("@userlist")){//如果新用户列表为空
            jlt_disUsers.removeAll();
            jlt_disUsers.setListData(new String[]{});
        } else {//新用户列表不为空
            if(userNames.contains("@userlist")){//更新用户列表
                //获取每一个用户名
                String[] dis = userNames.split("@userlist");
                String [] disUsernames = new String[dis.length / 2];
                int j = 0;
		for(int i = 0; i < dis.length; i++){
                    disUsernames[j++] = dis[i++];
		}
                jlt_disUsers.removeAll();
                jlt_disUsers.setListData(disUsernames);
            }
            if(userNames.contains("@serverexit")){//如果服务器停止，置空
                jlt_disUsers.setListData(new String[]{});
            }
        }
    }
    
    public void setDisMess(String message) {
        if(message.contains("@chat")){//如果是群聊消息
            int local = message.indexOf("@chat");//消息结束标记
            JtpUtil.myAppendStr(this.jtp_disMess, message.substring(0, local) + "\n\n");//先双换行隔行吧
        }
        if(message.contains("@serverexit")){//如果服务器停止，置空
            jtp_disMess.setText("");
        }
    }
    
    public void setDisImage(Information info_re) {
        String head = info_re.getMess();
        int local = head.indexOf("@chat");
        JtpUtil.myAppendStr(this.jtp_disMess, head.substring(0, local));
        JtpUtil.myAppendImag(this.jtp_disMess, info_re.getImag());
        JtpUtil.myAppendStr(this.jtp_disMess, "\n\n");
    }
    
    public void setDisFile(Information info_re) {
        String head = info_re.getMess();
        int local = head.indexOf("@chat");
        JtpUtil.myAppendStr(this.jtp_disMess, head.substring(0, local));
        //显示下载文件按钮
        local = info_re.getFile().indexOf("_");
        JtpUtil.myAppendFile(jtp_disMess, info_re.getFile().substring(local + 1));
        JtpUtil.myAppendStr(this.jtp_disMess, "\n\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbt_start = new javax.swing.JButton();
        jbt_stop = new javax.swing.JButton();
        jbt_exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlt_disUsers = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtp_disMess = new javax.swing.JTextPane();
        jtf_port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jbt_start.setText("启动服务器");
        jbt_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_startActionPerformed(evt);
            }
        });

        jbt_stop.setText("停止服务器");
        jbt_stop.setEnabled(false);
        jbt_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_stopActionPerformed(evt);
            }
        });

        jbt_exit.setText("退出服务器");
        jbt_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_exitActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "在线用户", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jScrollPane1.setViewportView(jlt_disUsers);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "聊天消息", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jtp_disMess.setEditable(false);
        jScrollPane2.setViewportView(jtp_disMess);

        jtf_port.setEditable(false);
        jtf_port.setText("5000");
        jtf_port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_portActionPerformed(evt);
            }
        });
        jtf_port.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_portKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_portKeyTyped(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("端口号：");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_port, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jbt_start)
                .addGap(38, 38, 38)
                .addComponent(jbt_stop)
                .addGap(36, 36, 36)
                .addComponent(jbt_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbt_exit, jbt_start, jbt_stop});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbt_start)
                            .addComponent(jbt_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbt_exit)
                            .addComponent(jtf_port, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addGap(37, 37, 37))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbt_exit, jbt_start, jbt_stop});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //无用
    private void jtf_portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_portActionPerformed
    //无用
    private void jtf_portKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_portKeyPressed
        
    }//GEN-LAST:event_jtf_portKeyPressed

    //目前端口号不能更改
    //端口号设置只能输入数字或者删除键
    private void jtf_portKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_portKeyTyped
        //如果输入非数字，就取消键盘录入
	//思路：先获取字符，判断字符，取消事件
	char ch = evt.getKeyChar();
	if (!(ch >= '0' && ch <= '9')&&(ch != evt.VK_BACK_SPACE)) {
		evt.consume();
	}
    }//GEN-LAST:event_jtf_portKeyTyped

    //开始服务器
    private void jbt_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_startActionPerformed
        this.jbt_start.setEnabled(false);
        jbt_stop.setEnabled(true);//"停止"按钮可用
        server.startServer(this);//开启Server服务器操作线程
    }//GEN-LAST:event_jbt_startActionPerformed

    private void jbt_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_stopActionPerformed
        int flag = JOptionPane.showConfirmDialog(this, "是否要停止服务器？", "",JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(flag == JOptionPane.OK_OPTION){
            server.stopServer();//停止server
            jbt_start.setEnabled(true);
            jbt_stop.setEnabled(false);
        }
    }//GEN-LAST:event_jbt_stopActionPerformed

    private void jbt_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_exitActionPerformed
        if(this.jbt_stop.isEnabled()){//服务器还在运行，执行“停止服务器”按钮
            this.jbt_stop.doClick();
        }
        if(false == jbt_stop.isEnabled()) {//如果服务器没运行了
            //退出界面的话就清空文件夹吧~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            File srcFolder = new File("src\\download");
            File[] fileArray = srcFolder.listFiles();
            if (fileArray != null) {
                for (File file : fileArray) {
                    file.delete();
                }
            }
            //退出
            System.exit(0);
        }
    }//GEN-LAST:event_jbt_exitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbt_exit;
    private javax.swing.JButton jbt_start;
    private javax.swing.JButton jbt_stop;
    private javax.swing.JList jlt_disUsers;
    private javax.swing.JTextField jtf_port;
    private javax.swing.JTextPane jtp_disMess;
    // End of variables declaration//GEN-END:variables
}
